@InProceedings{macroswarm,
author="Aguzzi, Gianluca
and Casadei, Roberto
and Viroli, Mirko",
editor="Jongmans, Sung-Shik
and Lopes, Ant{\'o}nia",
title="MacroSwarm: A Field-Based Compositional Framework for Swarm Programming",
booktitle="Coordination Models and Languages",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="31--51",
abstract="Swarm behaviour engineering is an area of research that seeks to investigate methods for coordinating computation and action within groups of simple agents to achieve complex global goals like collective movement, clustering, and distributed sensing. Despite recent progress in the study and engineering of swarms (of drones, robots, vehicles), there is still need for general design and implementation methods that can be used to define complex swarm coordination in a principled way. To face this need, this paper proposes a new field-based coordination approach, called MacroSwarm, to design fully composable and reusable blocks of swarm behaviour. Based on the macroprogramming approach of aggregate computing, it roots on the idea of modelling each block of swarm behaviour by a purely functional transformation of sensing fields into actuation description fields, typically including movement vectors. We showcase the potential of MacroSwarm as a framework for collective intelligence by simulation, in a variety of scenarios including flocking, morphogenesis, and collective decision-making.",
isbn="978-3-031-35361-1"
}

@InProceedings{scarlib,
author="Domini, Davide
and Cavallari, Filippo
and Aguzzi, Gianluca
and Viroli, Mirko",
editor="Jongmans, Sung-Shik
and Lopes, Ant{\'o}nia",
title="ScaRLib: A Framework for Cooperative Many Agent Deep Reinforcement Learning in Scala",
booktitle="Coordination Models and Languages",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="52--70",
abstract="Multi Agent Reinforcement Learning (MARL) is an emerging field in machine learning where multiple agents learn, simultaneously and in a shared environment, how to optimise a global or local reward signal. MARL has gained significant interest in recent years due to its successful applications in various domains, such as robotics, IoT, and traffic control. Cooperative Many Agent Reinforcement Learning (CMARL) is a relevant subclass of MARL, where thousands of agents work together to achieve a common coordination goal.",
isbn="978-3-031-35361-1"
}


@article{collectiveautonomy,
  author    = {Roberto Casadei and
               Gianluca Aguzzi and
               Mirko Viroli},
  title     = {A Programming Approach to Collective Autonomy},
  journal   = {J. Sens. Actuator Networks},
  volume    = {10},
  number    = {2},
  pages     = {27},
  year      = {2021},
  url       = {https://doi.org/10.3390/jsan10020027},
  doi       = {10.3390/jsan10020027},
  timestamp = {Thu, 16 Sep 2021 17:57:56 +0200},
  biburl    = {https://dblp.org/rec/journals/jsan/CasadeiAV21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  abstract  = {Research and technology developments on autonomous agents and autonomic computing promote a vision of artificial systems that are able to resiliently manage themselves and autonomously deal with issues at runtime in dynamic environments. Indeed, autonomy can be leveraged to unburden humans from mundane tasks (cf. driving and autonomous vehicles), from the risk of operating in unknown or perilous environments (cf. rescue scenarios), or to support timely decision-making in complex settings (cf. data-centre operations). Beyond the results that individual autonomous agents can carry out, a further opportunity lies in the collaboration of multiple agents or robots. Emerging macro-paradigms provide an approach to programming whole collectives towards global goals. Aggregate computing is one such paradigm, formally grounded in a calculus of computational fields enabling functional composition of collective behaviours that could be proved, under certain technical conditions, to be self-stabilising. In this work, we address the concept of collective autonomy, i.e., the form of autonomy that applies at the level of a group of individuals. As a contribution, we define an agent control architecture for aggregate multi-agent systems, discuss how the aggregate computing framework relates to both individual and collective autonomy, and show how it can be used to program collective autonomous behaviour. We exemplify the concepts through a simulated case study, and outline a research roadmap towards reliable aggregate autonomy.}
}

@inproceedings{research,
  author    = {Gianluca Aguzzi},
  title     = {Research directions for Aggregate Computing with Machine Learning},
  booktitle = {2st IEEE International Conference on Autonomic Computing and Self-Organizing Systems - ACSOS 2021},
  abstract  = {Collective adaptive systems (CASs) are challenging
from the engineering perspective. Different techniques aim at
taming these systems, either using declarative or black-box approaches (e.g. Machine Learning, Evolutionary Algorithms, etc.).
Among the many declarative approaches, Aggregate Computing
is a novel technique by which developers can express collective
system behaviours from a global perspective, using a compositional and functional programming technique. Over the years,
Aggregate Computing has been applied in different scenarios,
ranging from smart cities to a crowd of augmented people.
Despite its promising capabilities, it is sometimes challenging to
describe aggregate behaviours, so we aim at merging Aggregate
Computing with black-box techniques to simplify the aggregate
program synthesis}
}

@inproceedings{scafiloci,
  author    = {Gianluca Aguzzi and
               Roberto Casadei and
               Danilo Pianini and
               Guido Salvaneschi and
               Mirko Viroli},
  title     = {Towards Pulverised Architectures for Collective Adaptive Systems through Multi-tier Programming},
  booktitle = {eCAS 2021: 6th eCAS Workshop on Engineering Collective Adaptive Systems},
  abstract  = {Field-based coordination is a model for expressing the coordination logic of large-scale adaptive systems, composing functional blocks from a global perspective. As for any coordination model, a proper toolchain must be developed to support its adoption across all development phases. Under this point of view, the ScaFi toolkit provides a coordination language (field calculus) as a DSL internal in the Scala language, a library of reusable building blocks, and an infrastructure for simulation of distributed deployments. In this work, we enrich such a toolchain by introducing ScaFi-Web, a web-based application allowing in-browser editing, execution, and visualisation of ScaFi programs. ScaFi-Web facilitates access to the ScaFi coordination technology by flattening the learning curve and simplifying configuration and requirements, thus promoting agile prototyping of field-based coordination specifications. In turn, this opens the door to easier demonstrations and experimentation, and also constitutes a stepping stone towards monitoring and control of simulated/deployed systems.}
}
@inproceedings{scafi,
  author    = {Roberto Casadei and
               Mirko Viroli and
               Giorgio Audrito and
               Ferruccio Damiani},
  editor    = {Tiziana Margaria and
               Bernhard Steffen},
  title     = {FScaFi : {A} Core Calculus for Collective Adaptive Systems Programming},
  booktitle = {Leveraging Applications of Formal Methods, Verification and Validation:
               Engineering Principles - 9th International Symposium on Leveraging
               Applications of Formal Methods, ISoLA 2020, Rhodes, Greece, October
               20-30, 2020, Proceedings, Part {II}},
  series    = {Lecture Notes in Computer Science},
  volume    = {12477},
  pages     = {344--360},
  publisher = {Springer},
  year      = {2020},
  annote    = {other},
  url       = {https://doi.org/10.1007/978-3-030-61470-6\_21},
  doi       = {10.1007/978-3-030-61470-6\_21},
  timestamp = {Sat, 14 Nov 2020 00:56:54 +0100},
  biburl    = {https://dblp.org/rec/conf/isola/CasadeiVAD20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{aggregatecomputing,
  author    = {Jacob Beal and
               Danilo Pianini and
               Mirko Viroli},
  title     = {Aggregate Programming for the Internet of Things},
  journal   = {Computer},
  volume    = {48},
  number    = {9},
  pages     = {22--30},
  year      = {2015},
  url       = {https://doi.org/10.1109/MC.2015.261},
  doi       = {10.1109/MC.2015.261},
  annote    = {other},
  timestamp = {Wed, 12 Aug 2020 10:31:37 +0200},
  biburl    = {https://dblp.org/rec/journals/computer/BealPV15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{processes,
  author    = {Roberto Casadei and
               Mirko Viroli and
               Giorgio Audrito and
               Danilo Pianini and
               Ferruccio Damiani},
  title     = {Engineering collective intelligence at the edge with aggregate processes},
  journal   = {Eng. Appl. Artif. Intell.},
  volume    = {97},
  pages     = {104081},
  year      = {2021},
  url       = {https://doi.org/10.1016/j.engappai.2020.104081},
  doi       = {10.1016/j.engappai.2020.104081},
  timestamp = {Mon, 21 Dec 2020 09:15:18 +0100},
  annote    = {other},
  biburl    = {https://dblp.org/rec/journals/eaai/CasadeiVAPD21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/icse/DAngeloGGGNPT19,
  author    = {Mirko D'Angelo and
               Simos Gerasimou and
               Sona Ghahremani and
               Johannes Grohmann and
               Ingrid Nunes and
               Evangelos Pournaras and
               Sven Tomforde},
  editor    = {Marin Litoiu and
               Siobh{\'{a}}n Clarke and
               Kenji Tei},
  title     = {On learning in collective self-adaptive systems: state of practice
               and a 3D framework},
  booktitle = {Proceedings of the 14th International Symposium on Software Engineering
               for Adaptive and Self-Managing Systems, SEAMS@ICSE 2019, Montreal,
               QC, Canada, May 25-31, 2019},
  pages     = {13--24},
  publisher = {{ACM}},
  year      = {2019},
  annote    = {other},
  url       = {https://doi.org/10.1109/SEAMS.2019.00012},
  doi       = {10.1109/SEAMS.2019.00012},
  timestamp = {Wed, 16 Oct 2019 14:14:49 +0200},
  biburl    = {https://dblp.org/rec/conf/icse/DAngeloGGGNPT19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{watkins1992q,
  title={Q-learning},
  author={Watkins, Christopher JCH and Dayan, Peter},
  journal={Machine learning},
  volume={8},
  number={3-4},
  annote={other},
  pages={279--292},
  year={1992},
  publisher={Springer}
}

@article{swarm-clustering,
  doi = {10.1007/s11721-022-00215-y},
  url = {https://doi.org/10.1007/s11721-022-00215-y},
  year = {2022},
  month = sep,
  publisher = {Springer Science and Business Media {LLC}},
  author = {Gianluca Aguzzi and Giorgio Audrito and Roberto Casadei and Ferruccio Damiani and Gianluca Torta and Mirko Viroli},
  title = {A field-based computing approach to sensing-driven clustering in robot swarms},
  journal = {Swarm Intelligence},
  abstract = {Swarm intelligence leverages collective behaviours emerging from interaction and activity of several “simple” agents to solve problems in various environments. One problem of interest in large swarms featuring a variety of sub-goals is swarm clustering, where the individuals of a swarm are assigned or choose to belong to zero or more groups, also called clusters. In this work, we address the sensing-based swarm clustering problem, where clusters are defined based on both the values sensed from the environment and the spatial distribution of the values and the agents. Moreover, we address it in a setting characterised by decentralisation of computation and interaction, and dynamicity of values and mobility of agents. For the solution, we propose to use the field-based computing paradigm, where computation and interaction are expressed in terms of a functional manipulation of fields, distributed and evolving data structures mapping each individual of the system to values over time. We devise a solution to sensing-based swarm clustering leveraging multiple concurrent field computations with limited domain and evaluate the approach experimentally by means of simulations, showing that the programmed swarms form clusters that well reflect the underlying environmental phenomena dynami}
}

@article{scafi-paper,
  doi = {10.2139/ssrn.4169748},
  url = {https://doi.org/10.2139/ssrn.4169748},
  year = {2022},
  publisher = {Elsevier {BV}},
  author = {Roberto Casadei and Mirko Viroli and Gianluca Aguzzi and Danilo Pianini},
  title = {{ScaFI}: A Scala {DSL} and Toolkit for Aggregate Programming},
  journal = {{SSRN} Electronic Journal},
  abstract = {Supported by current socio-scientific trends, programming the global behaviour of whole computational collectives makes for great opportunities, but also significant challenges. Recently, aggregate computing has emerged as a prominent paradigm for so-called collective adaptive systems programming. To shorten the gap between such research endeavours and mainstream software development and engineering, we present ScaFi, a Scala toolkit providing an internal domain-specific language, libraries, a simulation environment, and runtime support for practical aggregate computing systems development.}
}

@inproceedings{roadmap,
  author    = {Gianluca Aguzzi and
               Roberto Casadei and
               Mirko Viroli},
  title     = {Machine Learning for Aggregate Computing: a Research Roadmap},
  booktitle = {2022 IEEE 42nd International Conference on Distributed Computing Systems Workshops (ICDCSW)
, DISCOLI@ICDCS 2022, Bologna},
  abstract = {Aggregate computing is a macro-approach for pro-
gramming collective intelligence and self-organisation in dis-
tributed systems. In this paradigm, a single “aggregate program”
drives the collective behaviour of the system, provided that the
agents follow an execution protocol consisting of asynchronous
sense-compute-act rounds. For actual execution, a proper aggre-
gate computing middleware or platform has to be deployed across
the nodes of the target distributed system, to support the services
needed for the execution of applications. Overall, the engineering
of aggregate computing applications is a rich activity that spans
multiple concerns including designing the aggregate program,
developing reusable algorithms, detailing the execution model,
and choosing a deployment based on available infrastructure.
Traditionally, these activities have been carried out through ad-
hoc designs and implementations tailored to specific contexts and
goals. To overcome the complexity and cost of manually tailoring
or fixing algorithms, execution details, and deployments, we pro-
pose to use machine learning techniques, to automatically create
policies for applications and their management. To support such
a goal, we detail a rich research roadmap, showing opportunities
and challenges of integrating aggregate computing and learning.},
  year      = {2022},
}

@inproceedings{engineering,
  author          = {Roberto Casadei and 
  Danilo Pianini and 
  Gianluca Aguzzi and 
  Giorgio Audrito and 
  Gianluca Torta and 
  Marco Ottina and 
  Ferruccio Damiani and 
  Mirko Viroli},
  booktitle       = {The 1st International Workshop on COMMunity-OrieNted WEARrable computing Systems},
  abstract = {The opportunities and challenges of recent and
forthcoming distributed computing scenarios have been promoting 
research on languages and paradigms aimed at modelling the
macro/collective behaviour of systems as well as mechanisms to
endow them with self-* capabilities. One example is the aggregate
computing paradigm, which supports the development of self-
organising systems (e.g., robot swarms, computational ecosys-
tems, and crowd-based services) through various formalisms and
tools developed over a decade. However, very limited work has
been done by a methodological and automation perspective. In
this paper, we explore the issue of organising the development
process of aggregate computing systems. Accordingly, we outline
novel research directions that arise from careful analysis of
the peculiar issues in collective and self-organising systems, the
cornerstones of effective software engineering practices, and
recent scientific trends and insights.},
  title           = {Towards Automated Engineering for Collective Adaptive Systems: Vision and Research Directions},
  year            = {2022}
}

@article{domains,
  author            = {Gianluca Aguzzi and Roberto Casadei and Danilo Pianini and Mirko Viroli},
  journaltitle      = {IEEE Internet Computing @ 2022 IEEE},
  abstract = {The Internet of Things and edge computing are fostering a future of ecosystems
hosting complex decentralized computations, deeply integrated with our very dynamic
environments. Digitalized buildings, communities of people, and cities will be the
next-generation ``hardware and platform'', counting myriads of interconnected devices, on top of
which intrinsically-distributed computational processes will run and self-organize. They will
spontaneously spawn, diffuse to pertinent logical/physical regions, cooperate and compete,
opportunistically summon required resources, collect and analyze data, compute results, trigger
distributed actions, and eventually decay.
How would a programming model for such ecosystems look like? Based on research findings on
self-adaptive/self-organizing systems, this paper proposes design abstractions based on
``dynamic decentralization domains'': regions of space opportunistically formed to support
situated recognition and action. We embody the approach into a Scala application program
interface (API) enacting distributed execution and show its applicability in a case study of
environmental monitoring.},
  title             = {Dynamic Decentralization Domains for the Internet of Things},
  year              = {2022}
}

@inproceedings{rl-middleware,
  author          = {Gianluca Aguzzi and Roberto Casadei and Mirko Viroli},
  booktitle       = {4th IEEE International Conference on Autonomic Computing and Self-Organizing Systems - ACSOS 2023},
  abstract        = {Aggregate Computing is a macro-level approach
for programming collective intelligence and self-organisation in
distributed systems. In this paradigm, system behaviour unfolds
as a combination of a system-wide program, functionally manip-
ulating distributed data structures called computational fields,
and a distributed protocol where devices work at asynchronous
rounds comprising sense-compute-interact steps. Interestingly,
there exists a large amount of flexibility in how aggregate systems
could actually execute while preserving the desired functionality.
The ideal place for making choices about execution is the
aggregate computing platform (or middleware), which can be
engineered with the goal of promoting efficiency and other non-
functional goals. In this work, we explore the possibility of
applying Reinforcement Learning at the platform level in order
to optimise aspects of a collective computation while achieving
coherent functional goals. This idea is substantiated through
synthetic experiments of data propagation and collection, where
we show how Q-Learning could reduce the power consumption
of aggregate computations.},
  title           = {Addressing Collective Computations Efficiency: Towards a Platform-level Reinforcement Learning Approach},
  year            = {}
}

@inproceedings{acgnn,
  author          = {Gianluca Aguzzi and Mirko Viroli and Lukas Esterle},
  booktitle       = {4th IEEE International Conference on Autonomic Computing and Self-Organizing Systems - ACSOS 2023, Toronto},
  abstract        = {Coordinating a multi-agent system of intelligent
situated agents is a traditional research problem, impacted by the
challenges posed by the very notion of distributed intelligence.
These problems arise from agents acquiring information locally,
sharing their knowledge, and acting accordingly in their environment in order to achieve a common, global goal. Individual
agents need to control how they share their knowledge in order
to not overburden the network or other agents with unnecessary
information. These problems are even more evident in large-scale
collective adaptive systems, where agent interactions are necessarily proximity-based, thus making the emergence of controlled
global collective behaviour harder.
In this context, two main approaches have been proposed
for creating distributed controllers out of macro-level task/goal
descriptions: manual design, in which programmers build the
controllers directly, and automatic design, which involves synthesizing programs using machine learning methods. In this
paper, we consider a new hybrid approach called Field-Informed
reinforcement learning (FIRL). We utilise manually designed
computational fields (globally distributed data structures) to
manage global agent coordination. Then, using Deep Q-learning
in combination with Graph Neural Networks we enable the agents
to learn the necessary local behaviour automatically to solve
collective tasks, relying on those fields through local perception.
This allows us to create distributed controllers informed by a
collective knowledge that has been distilled during learning, but
that uses only local information at runtime. We demonstrate the
effectiveness of this new approach in simulated use cases where
tracking and covering tasks for swarm robotics are successfully
solved.},
  title           = {Field-informed Reinforcement Learning of Collective Tasks with Graph Neural Networks},
  year            = {2023},
  annote = {mine}
}
@inproceedings{frasp,
  author          = {Roberto Casadei and Francesco Dente and Gianluca Aguzzi and Danilo Pianini and Mirko Viroli},
  booktitle       = {4th IEEE International Conference on Autonomic Computing and Self-Organizing Systems - ACSOS 2023, Toronto},
  abstract        = {Engineering self-organising systems -- e.g., robot swarms, collectives of wearables, or distributed infrastructures -- is a notable research challenge, investigated and addressed through various kinds of approaches, e.g., automatic (such as learning-based) or manual ones. In this work, we focus on the latter, and specifically on programming language-based approaches. Our goal is to devise a declarative language for expressing self-organising behaviour able to abstract from low-level concerns (like scheduling and deployment), which can usually be optimised at the platform/middleware level. Currently, most of the state-of-the-art languages for self-organisation leverage a time-driven or proactive execution model, where devices repeatedly execute sense-compute-act rounds, which is simple to reason about but limited in terms of flexibility in scheduling and management of reactive behaviours. Motivated by this, and inspired by the functional reactive paradigm, in this work we propose a reactive self-organisation programming language that enables to decouple the program logic from its scheduling. Specifically, we implement the idea through a functional reactive implementation of aggregate programming in Scala, based on the functional reactive library Sodium. The result is a functional reactive self-organisation programming model, which maintains the same expressiveness and benefits of aggregate programming while enabling significant improvements in terms of scheduling controllability, flexibility in the sensing/actuation model, and execution efficiency.},
  title           = {Self-Organisation Programming: A Functional Reactive Macro Approach},
  year            = {2023},
  annote = {mine}
}

@inproceedings{scafitutorial,
  author          = {Roberto Casadei and Gianluca Aguzzi and Danilo Pianin and Mirko Viroli},
  booktitle       = {4th IEEE International Conference on Autonomic Computing and Self-Organizing Systems - ACSOS 2023, Toronto},
  abstract        = {Large-scale and fully distributed cyber-physical systems (CPS), such as swarm robotics or IoT systems, pose significant challenges for programming and design. These challenges
include promoting the desired (emergent) collective behaviour,
dealing with failures, enacting decentralised coordination, and
deploying efficient executions. Aggregate computing is a promising approach that aims to simplify the design of such systems
by providing a high-level abstraction for describing collective
and self-organizing behaviors. In this tutorial, we introduce a
toolchain that supports the development of aggregate computing
applications, based on ScaFi (a Scala library for aggregate
programming) and Alchemist (a simulator for CPS scenarios).
We will showcase the toolchain by means of a series of examples,
ranging from simple collective behaviors to more complex selfadaptive and self-organizing ones, also providing several pointers
to research opportunities and applications in swarm robotics,
edge-cloud ecosystems, and more.},
  title           = {Programming (and Learning) Self-Adaptive \&
Self-Organizing Behaviour with ScaFi: for Swarms,
Edge-Cloud Ecosystems, and More},
  year            = {2023},
  annote = {mine}
}
@inproceedings{aguzzi2022towards,
  title={Towards Reinforcement Learning-based Aggregate Computing},
  author={Aguzzi, Gianluca and Casadei, Roberto and Viroli, Mirko},
  booktitle={International Conference on Coordination Languages and Models},
  pages={72--91},
  year={2022},
  abstract = {Recent trends in pervasive computing promote the vision of Collective Adaptive Systems (CASs): large-scale collections of relatively simple agents that act and coordinate with no central orchestrator to support distributed applications. Engineering global behaviour out of local activity and interaction, however, is a difficult task, typically addressed by try-and-error approaches in simulation environments. In the context of Aggregate Computing (AC), a prominent functional programming approach for CASs based on field-based coordination, this difficulty is reflected in the design of versatile algorithms preserving efficiency in a variety of environments. To deal with this complexity, in this work we propose to apply Machine Learning techniques to automatically devise local actions to improve over manually-defined AC algorithms specifications. Most specifically, we adopt a Reinforcement Learning-based approach to let a collective learn local policies to improve over the standard gradient algorithm—a cornerstone brick of several higher-level self-organisation algorithms. Our evaluation shows that the learned policies can speed up the self-stabilisation of the gradient to external perturbations.},
  organization={Springer}
}

@book{greenfield2010everyware,
  title={Everyware: The dawning age of ubiquitous computing},
  author={Greenfield, Adam},
  year={2010},
  publisher={New Riders},
  annote={other}
}

@ARTICLE{pervasive,
  author={Satyanarayanan, M.},
  journal={IEEE Personal Communications}, 
  title={Pervasive computing: vision and challenges}, 
  year={2001},
  volume={8},
  number={4},
  pages={10-17},
  annote={other},
  doi={10.1109/98.943998}
}

@article{weiser1999computer,
  title={The computer for the 21st century},
  author={Weiser, Mark},
  journal={ACM SIGMOBILE mobile computing and communications review},
  volume={3},
  number={3},
  pages={3--11},
  year={1999},
  annote={other},
  publisher={ACM New York, NY, USA}
}

@article{abowd2016beyond,
  title={Beyond Weiser: From ubiquitous to collective computing},
  author={Abowd, Gregory D},
  journal={Computer},
  volume={49},
  number={1},
  pages={17--23},
  year={2016},
  annote={other},
  publisher={IEEE}
}

@article{zambonelli2021time,
  title={Time-fluid field-based coordination through programmable distributed schedulers},
  author={Zambonelli, Franco and Mariani, Stefano and Viroli, Mirko and Casadei, Roberto and Pianini, Danilo},
  journal={Logical Methods in Computer Science},
  volume={17},
  year={2021},
  annote={other},
  publisher={Episciences. org}
}

@article{scarselli2008graph,
  title={The graph neural network model},
  author={Scarselli, Franco and Gori, Marco and Tsoi, Ah Chung and Hagenbuchner, Markus and Monfardini, Gabriele},
  journal={IEEE transactions on neural networks},
  volume={20},
  number={1},
  pages={61--80},
  year={2008},
  annote={other},
  publisher={IEEE}
}

@phdthesis{foerster2018deep,
  title={Deep multi-agent reinforcement learning},
  author={Foerster, Jakob N},
  year={2018},
  annote={other},
  school={University of Oxford}
}

@article{beal2015aggregate,
  title={Aggregate programming for the internet of things},
  author={Beal, Jacob and Pianini, Danilo and Viroli, Mirko},
  journal={Computer},
  volume={48},
  number={9},
  pages={22--30},
  year={2015},
  publisher={IEEE}
}

@article{Casadei2020,
  doi = {10.3390/fi12110203},
  url = {https://doi.org/10.3390/fi12110203},
  year = {2020},
  month = nov,
  publisher = {{MDPI} {AG}},
  volume = {12},
  number = {11},
  pages = {203},
  author = {Roberto Casadei and Danilo Pianini and Andrea Placuzzi and Mirko Viroli and Danny Weyns},
  title = {Pulverization in Cyber-Physical Systems: Engineering the Self-Organizing Logic Separated from Deployment},
  annote = {other},
  journal = {Future Internet}
}

@inproceedings{matignon2007hysteretic,
  title={Hysteretic q-learning: an algorithm for decentralized reinforcement learning in cooperative multi-agent teams},
  author={Matignon, La{\"e}titia and Laurent, Guillaume J and Le Fort-Piat, Nadine},
  booktitle={2007 IEEE/RSJ International Conference on Intelligent Robots and Systems},
  pages={64--69},
  year={2007},
  annote={other},
  organization={IEEE}
}

@article{watkins1992q,
  title={Q-learning},
  author={Watkins, Christopher JCH and Dayan, Peter},
  journal={Machine learning},
  volume={8},
  number={3},
  pages={279--292},
  year={1992},
  annote={other},
  publisher={Springer}
}

@inproceedings{aguzzi2021scafi,
  title={ScaFi-Web: A Web-Based Application for Field-Based Coordination Programming},
  author={Aguzzi, Gianluca and Casadei, Roberto and Maltoni, Niccol{\`o} and Pianini, Danilo and Viroli, Mirko},
  booktitle={International Conference on Coordination Languages and Models},
  pages={285--299},
  year={2021},
  annotate={other},
  organization={Springer}
}